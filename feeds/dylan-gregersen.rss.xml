<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dylan Gregersen</title><link>https://astrodsg.github.io/</link><description>"You are something the whole Universe is doing, the same way a wave is something the whole ocean is doing" ― Alan W. Watts</description><atom:link href="https://astrodsg.github.io/feeds/dylan-gregersen.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 18 Dec 2014 09:28:50 -0700</lastBuildDate><item><title>Practical Tools for Matplotlib Colormaps</title><link>https://astrodsg.github.io/blog/programming/2014/12/practical-tools-for-matplotlib-colormaps.html</link><description>&lt;h1 id="color-maps-rock"&gt;Color Maps Rock!&lt;/h1&gt;
&lt;p&gt;I like colorful plots. They may cost &lt;a href="http://hyperboleandahalf.blogspot.com/2010/04/alot-is-better-than-you-at-everything.html"&gt;alot&lt;/a&gt; to publish in a research journal but they’re just so pretty. Quite a few blogs have been written ranting about rainbow colormaps and also about how to choose really good colormaps.&lt;/p&gt;
&lt;p&gt;This blog is devoted to practical tools I use to help me with colormapping. The actual code is in a github gist of &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Some other useful colormap links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/users/colormaps.html"&gt;Maplotlib: Choosing Colormaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/"&gt;Jake Vanderplas: How bad is your colormap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://colormap.org/"&gt;Custom Colormap Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For general color layouts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://colorbrewer2.org/"&gt;Colorbrewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paletton.com/#uid=1000u0kllllaFw0g0qFqFg0w0aF"&gt;Paletton&lt;/a&gt; - a really cool color scheme tool which includes tools to filter by colorblindness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Below is a really cool colormap image of the Milky Way’s magnetic field &lt;a href="http://public.planck.fr/resultats/249-planck-revele-l-invisible"&gt;captured by the Planck spacecraft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/static/img/blog/Plank-Galactic-Magentic-Field-640x640.jpg" alt="Plank Galactic Magnetic Field" style="height: 100%; width: 100%; max-height:500px; "&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id="colormap-reference"&gt;Colormap Reference&lt;/h2&gt;
&lt;p&gt;Several colormap references scripts/functions exist; mine is better (haha). In my &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt; file I have a function called &lt;code&gt;show_mpl_cmaps&lt;/code&gt;. This uses a lookup table to group together relevant colormaps and a graifier to also show what that colormap looks like in gray scale. I’ve added this to my PYTHONSTARTUP script so when I need a quick reference I can just open a terminal and type &lt;code&gt;show_mpl_cmaps()&lt;/code&gt; to get:&lt;/p&gt;
&lt;p&gt;&lt;img src="/static/img/blog/mpl_colormaps.png" alt="Matplotlib Colormaps" /&gt;{}&lt;/p&gt;
&lt;h2 id="truncating-colormaps"&gt;Truncating Colormaps&lt;/h2&gt;
&lt;p&gt;Search Keywords: Reducing color range, shorten colormap, remove white from colormap&lt;/p&gt;
&lt;p&gt;I searched for a while and could find something that made a colormap cut off certain colors. For example, taking the &lt;code&gt;plt.cm.rainbow&lt;/code&gt; and reducing it to only blue to orange (I know rainbow is terrible, but humor me). Or you want to use &lt;code&gt;plt.cm.gist_heat&lt;/code&gt; but cut off the white top.&lt;/p&gt;
&lt;p&gt;I hope if you’re reading this I can save you some time in having already worked out a good way to truncate a colormap. It’s a pretty short function I called &lt;code&gt;truncate_cmap&lt;/code&gt; which I’ve included in &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt; gist.&lt;/p&gt;
&lt;div class="row mpl-cmap"&gt;
&lt;div class="span6"&gt;
&lt;div class="cmap-image-header"&gt;
&lt;p&gt;
plt.colormap(plt.imshow(cnts,cmap=plt.cm.rainbow))
&lt;/p&gt;
&lt;/div&gt;
&lt;img src="/static/img/blog/cmap_rainbow.svg" alt="Colormap"&gt;&lt;/img&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;div class="cmap-image-header"&gt;
&lt;p&gt;
plt.colormap(plt.imshow(cnts,cmap=truncate_cmap(plt.cm.rainbow,n_min=40,n_max=210))
&lt;/p&gt;
&lt;/div&gt;
&lt;img src="/static/img/blog/cmap_rainbow_truncated.svg" alt="Truncated Colormap"&gt;&lt;/img&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="the-monocolormap"&gt;The MonoColorMap&lt;/h2&gt;
&lt;p&gt;The final tool I’ll leave you with is my own…&lt;code&gt;MonoColormap&lt;/code&gt;. It’s a silly colormap which always returns the same color (hence mono-color). You instantiate it &lt;code&gt;cmap=MonoColormap('r')&lt;/code&gt; and can use any maplotlib color or hex color. I found it useful when I wanted to overplot some image but just have it gray out with some opacity. It’s also located in &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt; gist.&lt;/p&gt;
&lt;h2 id="in-conclusion"&gt;In Conclusion…&lt;/h2&gt;
&lt;p&gt;Hope this helps you with colormaps. If you didn’t figure out from the post, all the functions and code are publicly available as a github gist at &lt;a href="https://gist.github.com/astrodsg/09bfac1b68748967ed8b#file-mpl_colormap_tools"&gt;Matplotlib Colormap Tools&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Gregersen</dc:creator><pubDate>Thu, 18 Dec 2014 09:28:50 -0700</pubDate><guid>tag:astrodsg.github.io,2014-12-18:blog/programming/2014/12/practical-tools-for-matplotlib-colormaps.html</guid><category>plotting</category><category>programming</category><category>python</category><category>matplotlib</category><category>colormaps</category></item><item><title>Supermongo to Python</title><link>https://astrodsg.github.io/blog/astronomy/2014/10/supermongo-to-python.html</link><description>&lt;h1 id="supermongo-to-python-matplotlib"&gt;Supermongo to Python Matplotlib&lt;/h1&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Supermongo (SM) is a domain-specific programming language for creating plots. It was first written in 1987. Astronomers adopted this language as a primary plotting package for data analysis. Many groundbreaking discoveries have been seen using supermongo plots. However, new tools exist for plotting which have evolved from first plotting languages like Supermongo. These new tools provide methods for creating plots with fewer lines of code. They provide better integration into other programming languages and code.&lt;/p&gt;
&lt;p&gt;Matplotlib is a domain-specific plotting library for the general-purpose programming language Python. This library provides all the plotting capabilities of Supermongo and more. This post is to provide a 1-to-1 guide for Supermongo experts to apply their knowledge in Python with Matplotlib.&lt;/p&gt;
&lt;p&gt;Other Python plotting packages include : bokeh, plotly, vispy&lt;/p&gt;
&lt;!-- __TODO: outline__

[General Comparison ](##General-Comparison)
[Getting Started With Supermongo-Python](##Getting-Started-With-Supermongo-Python)
 --&gt;
&lt;hr /&gt;
&lt;h2 id="general-comparison"&gt;General Comparison&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Variables:&lt;/strong&gt; In Supermongo all variables are global so wherever you change them, within any macro, they change everywhere else. In Python variables have scope. You can use the same variable name in mulitple functions and be sure that they will act independantly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plot States:&lt;/strong&gt; In Supermongo you have a single plot state which you update with the interactive commands. Matplotlib also uses a plot state which you edit with commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Object Oriented:&lt;/strong&gt; Supermongo is a procedural programming language. You write out all the steps and they execute in that order. Python is object oriented meaning you can create data objects and write them into procedures. This method is how your operating system is built and is extremely useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Community Support:&lt;/strong&gt; If you’ve ever searched the internet for help with Supermongo (chances are you have if you’re reading this) you’ve come across a handful of useful sites: The &lt;a href="http://www.astro.princeton.edu/~rhl/sm/"&gt;SM manual&lt;/a&gt;, &lt;a href="http://www.astro.caltech.edu/~apeter/sm/basic.html"&gt;Annika Peter’s Guide&lt;/a&gt;, &lt;a href="http://astroweb.astr.cwru.edu/craig/sm/plot_sm.html"&gt;Craig Rudick’s Tutorial&lt;/a&gt; and &lt;a href="http://www.rebeccastanek.com/super/"&gt;Rebecca Stanek’s Guide&lt;/a&gt;. These resources and only a few others are the mainstay of the Supermongo online support.&lt;/p&gt;
&lt;p&gt;By contrast the community supporting Matplotlib is immense. Not only is it developed by many people to have lots of functionality, it also has a large user base. If you are unsure how to make some plot thing, a quick internet search often pulls up many solutions. &lt;!-- TODO look up main matplotlib repo --&gt;&lt;/p&gt;
&lt;h2 id="python-requirements"&gt;Python requirements&lt;/h2&gt;
&lt;p&gt;Because general purpose language you’ll need specific subpackages. For this tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maplotlib&lt;/li&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully, these packages came with your installation of Python. You can also install them using the command line utility &lt;code&gt;pip&lt;/code&gt; (e.g. &lt;code&gt;pip install numpy&lt;/code&gt;) This tutorial will work with both Python 2 and 3.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;h3 id="working-interactively"&gt;Working interactively&lt;/h3&gt;
&lt;p&gt;In Supermongo all your plotting is done either interactively (you type and the plot is modified) or using a script. In Python you do the same.&lt;/p&gt;
&lt;p&gt;To use the interactive mode, on the command line type &lt;code&gt;python&lt;/code&gt; (better yet try out &lt;code&gt;ipython&lt;/code&gt; for more interactive fun). Now you should have a new prompt, probably with ‘&amp;gt;&amp;gt;&amp;gt;’ which you type your python code. (Check out TODO for a python tutorial)&lt;/p&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="ch"&gt;import&lt;/span&gt; numpy &lt;span class="ch"&gt;as&lt;/span&gt; np  
x = np.array(&lt;span class="dv"&gt;10&lt;/span&gt;)  
&lt;span class="co"&gt;# comment&lt;/span&gt;
&lt;span class="kw"&gt;for&lt;/span&gt; i in &lt;span class="dt"&gt;range&lt;/span&gt;(&lt;span class="dt"&gt;len&lt;/span&gt;(x)):
    &lt;span class="co"&gt;&amp;quot;&amp;quot;&amp;quot; String doc &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="dt"&gt;print&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot; value {} = {}&amp;quot;&lt;/span&gt;.&lt;span class="dt"&gt;format&lt;/span&gt;(i,x[i]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a side by side comparison of interactive mode.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 29%" /&gt;
&lt;col style="width: 51%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;div X11
set x = {2,3}
set y = {5,10}
con x y
xlabel time
ylabel temperature
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="ch"&gt;from&lt;/span&gt; matplotlib.pylab &lt;span class="ch"&gt;import&lt;/span&gt; *
x = [&lt;span class="dv"&gt;2&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;]
y = [&lt;span class="dv"&gt;5&lt;/span&gt;,&lt;span class="dv"&gt;10&lt;/span&gt;]
plot(x,y)
xlabel(&lt;span class="st"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;)
ylabel(&lt;span class="st"&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;)
show() &lt;span class="co"&gt;# not necssary if run ion()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The remainder of the tutorial I don’t use &lt;code&gt;from matplotlib.pylab import *&lt;/code&gt; and instead use &lt;code&gt;import matplotlib.pylab as plt&lt;/code&gt; then commands like &lt;code&gt;plt.plot&lt;/code&gt;. The reason has to do with how many named things there are and to allow me to make my own &lt;code&gt;plot&lt;/code&gt; function different from the default &lt;code&gt;plt.plot&lt;/code&gt; function. Basically, it’s good coding practice.&lt;/p&gt;
&lt;h3 id="writing-scripts"&gt;Writing Scripts&lt;/h3&gt;
&lt;p&gt;Both languages allow you to write a script to execute commands. If you’re not doing this you really should. In a nut shell, you just write the lines you would type into the interactive mode into a text file and then execute that file. You will want to use &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt;, &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;, &lt;a href="http://www.barebones.com/products/textwrangler/"&gt;TextWrangler&lt;/a&gt; or some equivalent text editor.&lt;/p&gt;
&lt;p&gt;With Supermongo you write a script with at least one macro, for example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“script.sm”&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="supermongo"&gt;&lt;code&gt;main_macro 
    dev x11
    ctype white
    set x=0.0,10.0,1.0
    set y=x**2
    lim x y 
    box
    con x y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then startup Supermongo using &lt;code&gt;sm&lt;/code&gt; enter &lt;code&gt;macro read script.sm&lt;/code&gt; and then &lt;code&gt;main_macro&lt;/code&gt; to execute.&lt;/p&gt;
&lt;p&gt;For Python you write a script similarly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“script.py”&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="ch"&gt;import&lt;/span&gt; matplotlib.pylab &lt;span class="ch"&gt;as&lt;/span&gt; plt
&lt;span class="ch"&gt;import&lt;/span&gt; numpy &lt;span class="ch"&gt;as&lt;/span&gt; np

x = np.arange(&lt;span class="fl"&gt;0.0&lt;/span&gt;,&lt;span class="fl"&gt;10.0&lt;/span&gt;,&lt;span class="fl"&gt;1.0&lt;/span&gt;)
y = x**&lt;span class="dv"&gt;2&lt;/span&gt;
plt.plot(x,y)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can run it with &lt;code&gt;python script.py&lt;/code&gt; or open it interactively using &lt;code&gt;python&lt;/code&gt; and write &lt;code&gt;execfile(&amp;quot;script.py&amp;quot;)&lt;/code&gt;. &lt;em&gt;Note:&lt;/em&gt; In Python 3, they deprecated execfile. See my post &lt;a href="{filename}blog/programming/2014/10/execfile-lives.html"&gt;Execfile Lives!&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="comparisons-of-supermongo-and-python-plotting"&gt;Comparisons of Supermongo and Python Plotting&lt;/h2&gt;
&lt;p&gt;Plotting libraries implement functions to display views of data. One of the basic views is comparing one data parameter (say X) against another (say Y) and just plotting the intersecting points (a.k.a. a scatter plot). In this section, I make direct comparisons of Supermongo to Python plotting methods.&lt;/p&gt;
&lt;h3 id="adding-items-to-plots"&gt;Adding items to plots&lt;/h3&gt;
&lt;p&gt;Both plotting packages create some plot axes which you can then add views of your data to.&lt;/p&gt;
&lt;p&gt;Both plotting packages have methods for adding XY data as lines, points, and with errorbars. Below is the side by side comparison.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 17%" /&gt;
&lt;col style="width: 24%" /&gt;
&lt;col style="width: 57%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Plot lines&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;connect x y&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.plot(x,y)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Plot line&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;line x1 y1 x2 y2&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.plot([x1,x2],[y1,y2])&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Plot line&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;relocate x1 y1
draw x2 y2&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.plot([x1,x2],[y1,y2])&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Plot points&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;points x y

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.scatter(x,y)
&lt;span class="co"&gt;# or use&lt;/span&gt;
plt.plot(x,y,linestyle=&lt;span class="st"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Error bars&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;errory x y yerr
errorx x y xerr
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.errorbar(x,y,yerr=yerr)
plt.errorbar(x,y,xerr=xerr)
plt.errobar(x,y,xerr=xerr,yerr=yerr)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Horizontal Line&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;hzline y&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.axhline(y)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Vertical Line&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;vtline x&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.axvline(x)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Rectangle&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;relocate x1 y1
draw x1 y2
draw x2 y2
draw x2 y1
draw x1 y1&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;rec = plt.Rectangle(x1,y1,(x2-x1),(y2-y1))
plt.gca().add_patch(rec)

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 16%" /&gt;
&lt;col style="width: 34%" /&gt;
&lt;col style="width: 49%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Images&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;
Unknown, please comment





&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;x = np.ones((&lt;span class="dv"&gt;10&lt;/span&gt;,&lt;span class="dv"&gt;10&lt;/span&gt;))
plt.image(x)
&lt;span class="co"&gt;# or use&lt;/span&gt;
xcoord = np.linspace(&lt;span class="dv"&gt;0&lt;/span&gt;,&lt;span class="dv"&gt;5&lt;/span&gt;,&lt;span class="dv"&gt;20&lt;/span&gt;)
ycoord = np.linspace(-&lt;span class="dv"&gt;3&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;,&lt;span class="dv"&gt;10&lt;/span&gt;)
z = np.ones((&lt;span class="dv"&gt;20&lt;/span&gt;,&lt;span class="dv"&gt;10&lt;/span&gt;))
ax = plt.figure().add_subplot(&lt;span class="dv"&gt;111&lt;/span&gt;)
ax.pcolorfast(xcoord,ycoord,z)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- | Histogram | supermongo           | python                          |
|           | set bins xmin,xmax,step | bins = np.arange(xmin,xmax,step)   |
|           |                         |                                    |
|           |                      |                                 |
 &lt;small&gt;Thanks to http://www.rebeccastanek.com/super/ &lt;/small&gt; --&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 24%" /&gt;
&lt;col style="width: 32%" /&gt;
&lt;col style="width: 42%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;X-axis Label&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;xlabel label_name&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.xlabel(&lt;span class="st"&gt;&amp;quot;label_name&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Y-axis Label&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;ylabel label_name&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.ylabel(&lt;span class="st"&gt;&amp;quot;label_name&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Title Label&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;toplabel title_of_plot&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.title(&lt;span class="st"&gt;&amp;quot;title_of_plot&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Add Text to Plot&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;relocate x y
label label_text&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.text(x,y,&lt;span class="st"&gt;&amp;quot;label_text&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Annotations&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;relocate x y
label label_text
# draw arrows or
# additional items&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.annotate(x,y,&lt;span class="st"&gt;&amp;quot;label_text&amp;quot;&lt;/span&gt;)
&lt;span class="co"&gt;# use keywords for annotate&lt;/span&gt;
&lt;span class="co"&gt;# to easily add arrows to data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Plot legends are a pain in Supermongo. If you want a bounding box you need to draw the rectangle yourself specifying every corner. Then you have to specify the exact positions of each label, draw a point with the correct styles at the correct location, then add the text slightly offset. If you want to add/remove labels or if points styles change then you’re often thrown into chaos. (Of course you can write macros, but why? when Python makes it so easy!)&lt;/p&gt;
&lt;p&gt;The python &lt;code&gt;plt.legend&lt;/code&gt; function looks for any plot item you added a lable=? keyword argument to. This includes all lines and points as well as patches like plt.Rectangle and plt.Circle. It’s also easy to manipulate the position using the loc=? keyword of &lt;code&gt;plt.legend&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 19%" /&gt;
&lt;col style="width: 31%" /&gt;
&lt;col style="width: 48%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Plot Legend&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;# Draw Rectangle box
relocate xpt= ypt
# Set ptype,ctype
dot
relocate xpt+dx ypt
label Item Label&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co"&gt;# just add label keyword&lt;/span&gt;
&lt;span class="co"&gt;# to your plot call&lt;/span&gt;
plt.plot(x,y,label=&lt;span class="st"&gt;&amp;quot;Item Label&amp;quot;&lt;/span&gt;)
plt.legend()
&lt;span class="co"&gt;# use help(plt.legend) to find&lt;/span&gt;
&lt;span class="co"&gt;# out about keywords&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="controlling-plot-styles"&gt;Controlling Plot Styles&lt;/h3&gt;
&lt;p&gt;In Supermongo you must set the styles globally before adding them to the plot. This can lead to frustrating bugs if their out of order&lt;/p&gt;
&lt;p&gt;This one may or may not be red points:&lt;/p&gt;
&lt;pre class="supermongo"&gt;&lt;code&gt;points x y 
ctype red&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This causes the points to be red:&lt;/p&gt;
&lt;pre class="supermongo"&gt;&lt;code&gt;ctype red
points x y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Python you set the plot parameters at the same time you add the item. You do this using keywords in the function call.&lt;/p&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.scatter(x,y,c=&lt;span class="st"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find out about all the keywords by typing &lt;code&gt;help(plt.scatter)&lt;/code&gt; in the Python terminal or by using an internet search (the internet is your friend). &lt;em&gt;Caveat:&lt;/em&gt; Matplotlib has an rc file that sets some global variables. You can learn more about it &lt;a href="http://matplotlib.org/users/customizing.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alright, here comes the one to one of common styles you’ll want to manipulate. The Python answers I’m going to use the most common function; Note though, Matplotlib has some inconsistencies with names and so you should refer to the internet or help if you run into problems in your own implementation.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 19%" /&gt;
&lt;col style="width: 22%" /&gt;
&lt;col style="width: 44%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Point Color&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;ctype red
points x y
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.scatter(x,y,c=&lt;span class="st"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
&lt;span class="co"&gt;# hex colors work&lt;/span&gt;
plt.scatter(x,y,c=&lt;span class="st"&gt;&amp;#39;#DC322F&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Point Style&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;ptype 10 3&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.scatter(x,y,marker=&lt;span class="st"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Point Size&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;expand 1.5&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.scatter(x,y,s=&lt;span class="dv"&gt;100&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Line Color&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;ctype red
connect x y
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.plot(x,y,color=&lt;span class="st"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
&lt;span class="co"&gt;# hex colors work&lt;/span&gt;
plt.plot(x,y,color=&lt;span class="st"&gt;&amp;#39;#DC322F&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Line Style&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;ltype 2
connect x y
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.plot(x,y,linestyle=&lt;span class="st"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)
&lt;span class="co"&gt;# or the shortcut&lt;/span&gt;
plt.plot(x,y,ls=&lt;span class="st"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Line Width&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;lw 7&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.plot(x,y,lw=&lt;span class="dv"&gt;7&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="more-with-matplotlib"&gt;More with Matplotlib&lt;/h4&gt;
&lt;p&gt;In addition to the side by side comparison matplotlib provides you additional ways to plot your data and manipulate your figures.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/shapes_and_collections/scatter_demo.html"&gt;Scatter Points with Color and Size&lt;/a&gt; &lt;!-- * [Plot Annotations](http://matplotlib.org/examples/pylab_examples/annotation_demo2.html) --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/pylab_examples/fancyarrow_demo.html"&gt;Arrows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/pylab_examples/hist2d_demo.html"&gt;2D Histograms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/pylab_examples/contour_demo.html"&gt;Contours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/pylab_examples/image_interp.html"&gt;2D Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/statistics/boxplot_demo.html"&gt;Box Plots&lt;/a&gt; &lt;!-- * [Steam Plots](http://matplotlib.org/examples/images_contours_and_fields/streamplot_demo_features.html) --&gt; &lt;!-- * [Radar Charts](http://matplotlib.org/examples/api/radar_chart.html) --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/mplot3d/contourf3d_demo2.html"&gt;3D Contours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/widgets/slider_demo.html"&gt;Interactive Plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And much more! Check out the &lt;a href="http://matplotlib.org/gallery.html"&gt;Matplotlib Gallery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="modifying-plot-properties"&gt;Modifying Plot Properties&lt;/h3&gt;
&lt;p&gt;In addition to add items to a plot you want to manipulate properties of the plot itself. For example, you often want to re-size the bounds of the plot.&lt;/p&gt;
&lt;p&gt;It’s important to talk about the figure. In Supermongo you only ever have one figure which you can add multiple sub-plots to but usually only one. In Matplotlib you have the option to create multiple figures if you store&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 25%" /&gt;
&lt;col style="width: 23%" /&gt;
&lt;col style="width: 41%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Figure&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;page&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;fig = plt.figure()&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Add Plot&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;box&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;ax = fig.add_subplot(&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Multipanel Plot&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;window 2 2 1 2&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;ax = fig.add_subplot(&lt;span class="dv"&gt;2&lt;/span&gt;,&lt;span class="dv"&gt;2&lt;/span&gt;,&lt;span class="dv"&gt;4&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For Python, storing the plot in &lt;code&gt;ax&lt;/code&gt; is not necessary but it’s a best practice to use matplotlib objects.&lt;/p&gt;
&lt;!-- TODO: add  --&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;For multipanel plots Supermongo uses the &lt;code&gt;window&lt;/code&gt; command with arguments &lt;strong&gt;[&lt;em&gt;number of columns&lt;/em&gt;] [&lt;em&gt;number of rows&lt;/em&gt;] [&lt;em&gt;x-index&lt;/em&gt;] [&lt;em&gt;y-index&lt;/em&gt;]&lt;/strong&gt;. &lt;code&gt;window 2 2 1 2&lt;/code&gt; indicates 2 rows 2 columns and the current plot is the bottom-right.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;In Matplotlib there are several ways to accomplish this (add_subplot,plt.subplots,gridspec). I commonly create a figure &lt;code&gt;fig = plt.figure()&lt;/code&gt; and add a subplot &lt;code&gt;ax = fig.add_subplot(1,1,1)&lt;/code&gt;. The arguments are &lt;strong&gt;[&lt;em&gt;number of rows&lt;/em&gt;] [&lt;em&gt;number of columns&lt;/em&gt;] [&lt;em&gt;current plot&lt;/em&gt;]&lt;/strong&gt;. The current plot number starts counting at 1 from the top-left then continues as though you were reading English from left to right, top to bottom. To get the bottom right plot from the Supermongo example I would use &lt;code&gt;ax = fig.add_subplot(2,2,4)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Matplotlib has many ways to easily manipulate multipanel figures. Check out this &lt;a href="http://matplotlib.org/examples/pylab_examples/subplots_demo.html"&gt;Demo of multiple subplots&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 18%" /&gt;
&lt;col style="width: 37%" /&gt;
&lt;col style="width: 44%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Plot Bounds&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;limits xmin xmax ymin ymax


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;plt.axis((xmin,xmax,ymin,ymax))
&lt;span class="co"&gt;# also set each independently&lt;/span&gt;
plt.xlim(xmin,xmax)
plt.ylim(ymin,ymax)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Add Plot&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;box&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;ax = fig.add_subplot(&lt;span class="dv"&gt;111&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="saving-plots-to-file"&gt;Saving plots to file&lt;/h3&gt;
&lt;p&gt;Saving in Supermongo requires setting up a state to put the plot into. The following example from &lt;a href="http://www.astro.caltech.edu/~apeter/sm/basic.html"&gt;Annika Peter&lt;/a&gt; shows how to set up the device then save to file (the last &lt;code&gt;hardcopy&lt;/code&gt; is critical, you can also use &lt;code&gt;dev x11&lt;/code&gt; to close).&lt;/p&gt;
&lt;pre class="supermongo"&gt;&lt;code&gt;dev postencap my_first_plot.eps
ctype black
set x=0.0,10.0,1.0
set y=x**2
lim x y
box
con x y
ptype 10 3
points x y
xlabel x
ylabel y
hardcopy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Matplotlib does not require you to set anything up prior to building the items. Instead, you can just save out the state or figure with a command. The following example mimics the Supermongo example.&lt;/p&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="ch"&gt;import&lt;/span&gt; matplotlib.pylab &lt;span class="ch"&gt;as&lt;/span&gt; plt
&lt;span class="ch"&gt;import&lt;/span&gt; numpy &lt;span class="ch"&gt;as&lt;/span&gt; np
x = np.arange(&lt;span class="fl"&gt;0.0&lt;/span&gt;,&lt;span class="fl"&gt;10.0&lt;/span&gt;,&lt;span class="fl"&gt;1.0&lt;/span&gt;)
y = x**&lt;span class="dv"&gt;2&lt;/span&gt;
fig,ax = plt.subplots()
ax.plot(x,y,marker=&lt;span class="st"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)
ax.set_xlabel(&lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;)
ax.set_ylabel(&lt;span class="st"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;)
fig.savefig(&lt;span class="st"&gt;&amp;quot;my_first_plot.ps&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Matplotlib is smart about it’s saving methods. If you want to create a pdf not ps you just use the “.pdf” extension and it will save to that format. Many other formats are supported (e.g. png, pdf, jpg, gif, etc)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;h1 id="could-publish-the-programming-section-later" style="font-size:40px;font-weight:bold"&gt;Could publish the programming section later&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id="programming"&gt;Programming&lt;/h2&gt;
&lt;p&gt;Supermongo was developed to be plotting language. However, within it’s syntax you can specify any programming task which makes it more or less a complete language. However, you should avoid using SuperMongo for more than plots as much as possible. Other programming languages have much better implementations allowing you to write your code faster, debug easier, and for it to run more efficiently.&lt;/p&gt;
&lt;p&gt;For example, Python is a complete language which has good implementations of many programming concepts. It’s a language not just for plotting but&lt;/p&gt;
&lt;h3 id="reading-in-data"&gt;Reading in Data&lt;/h3&gt;
&lt;h3 id="syntax"&gt;Syntax&lt;/h3&gt;
&lt;h3 id="programming-actions"&gt;Programming Actions&lt;/h3&gt;
&lt;p&gt;define x 1 | x = 1&lt;/p&gt;
&lt;p&gt;set x = {1,2,3} | x = [1,2,3]&lt;/p&gt;
&lt;p&gt;set x = {1,2,3} | x = np.array([1,2,3])&lt;/p&gt;
&lt;p&gt;set x = 0,10,1 | x = np.arange(0,10,1) set x = 0,10,1 | x = list(range(0,10,1))&lt;/p&gt;
&lt;h3 id="control-structures"&gt;Control Structures&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;if statement&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 25%" /&gt;
&lt;col style="width: 25%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;if (expr) {
    echo True
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="kw"&gt;if&lt;/span&gt; expr:
    &lt;span class="dt"&gt;print&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;if,elseif,else statement&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="supermongo"&gt;&lt;code&gt;if(&amp;#39;Robert&amp;#39; == &amp;#39;Patricia&amp;#39;) {
   echo Something&amp;#39;s wrong
} else { if(&amp;#39;Patricia&amp;#39; == &amp;#39;Ralph&amp;#39;) {
   echo Still wrong
} else {
   echo Go Yankees
}}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="kw"&gt;if&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt; == &lt;span class="st"&gt;&amp;#39;Patricia&amp;#39;&lt;/span&gt;:
    &lt;span class="dt"&gt;print&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Something&amp;#39;s wrong&amp;quot;&lt;/span&gt;)
&lt;span class="kw"&gt;elif&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;Patricia&amp;#39;&lt;/span&gt; == &lt;span class="st"&gt;&amp;#39;Ralph&amp;#39;&lt;/span&gt;:
    &lt;span class="dt"&gt;print&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Still wrong&amp;quot;&lt;/span&gt;)
&lt;span class="kw"&gt;else&lt;/span&gt;:
    &lt;span class="dt"&gt;print&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Go Yankees&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%" /&gt;
&lt;col style="width: 25%" /&gt;
&lt;col style="width: 25%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Task&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Supermongo&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Python&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Conditionals&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;# same
==,!=,&amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="co"&gt;# same&lt;/span&gt;
==,!=,&amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;p&gt;Logic&lt;/p&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="supermongo"&gt;&lt;code&gt;a &amp;amp;&amp;amp; b
a  b
!a&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;a and b
a or b
!a&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="shout-outs"&gt;Shout Outs&lt;/h2&gt;
&lt;p&gt;Acknowledgments go to Robert Lupton and Patricia Monger for creating &lt;a href="http://www.astro.princeton.edu/~rhl/sm/"&gt;SM&lt;/a&gt; which really was revolutionary for it’s time. Special thanks to &lt;a href="http://www.astro.caltech.edu/~apeter/sm/basic.html"&gt;Annika Peter&lt;/a&gt;, &lt;a href="http://astroweb.astr.cwru.edu/craig/sm/plot_sm.html"&gt;Craig Rudick&lt;/a&gt; and &lt;a href="http://www.rebeccastanek.com/super/"&gt;Rebecca Stanek&lt;/a&gt; for their Supermongo guides. They helped me immensely when I learned Supermongo and in writing this guide.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Gregersen</dc:creator><pubDate>Sat, 25 Oct 2014 19:05:59 -0600</pubDate><guid>tag:astrodsg.github.io,2014-10-25:blog/astronomy/2014/10/supermongo-to-python.html</guid><category>astronomy</category><category>plotting</category><category>python</category><category>supermongo</category></item><item><title>Execfile Lives!</title><link>https://astrodsg.github.io/blog/programming/2014/10/execfile-lives.html</link><description>&lt;h1 id="execfile-lives"&gt;Execfile Lives!&lt;/h1&gt;
&lt;p&gt;One of the changes in Python 3 is the deprecation of the builtin function &lt;code&gt;execfile&lt;/code&gt;. This was done with very good intentions and lots of thought. I mostly agree with the choice but here’s why I choose to resurrect…&lt;code&gt;execfile&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="deprecating-execfile-was-good"&gt;Deprecating &lt;code&gt;execfile&lt;/code&gt; was Good&lt;/h2&gt;
&lt;!-- First off, `reload` was just taken out of the main namespace. You can still access it using `from importlib import reload`. I'm not exactly sure the reason (if you know please comment), but most likely it was to clean up the main python namespace. Modules will automatically be loaded each time you run a script afresh. Most of the time this is enough and requiring a developer to go to the standard library package importlib is nice. 
 --&gt;
&lt;p&gt;&lt;code&gt;execfile&lt;/code&gt; takes a file, compiles it into a code object (under the hood), and executes each line of code in turn every time it’s called. At one point, I used this in the way feared by the core Python developers: to include other code. I have two files “file1.py” and “file2.py”; I want to include “file1.py” into “file2.py” to execute the lines; So I do the following:&lt;/p&gt;
&lt;p&gt;“file2.py”&lt;/p&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;...
&lt;span class="dt"&gt;execfile&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;file1.py&amp;quot;&lt;/span&gt;)
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;THIS IS BAD!&lt;/em&gt; Primarily because you have no idea what variables in “file1.py” are now in the current namespace. It makes it hard to read and debug.&lt;/p&gt;
&lt;p&gt;To include extra code correctly you should locate “file1.py” into your PYTHONPATH and use &lt;code&gt;import file1&lt;/code&gt; to access all the variables. You can use &lt;code&gt;imp.reload&lt;/code&gt; if you want to interactively update data from the file&lt;/p&gt;
&lt;h2 id="deprecating-execfile-was-bad-and-how-to-resurrect"&gt;Deprecating &lt;code&gt;execfile&lt;/code&gt; was Bad and how to Resurrect&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Entirely for interactively use.&lt;/strong&gt; For my research, I primarily use Python as an interactive shell to type in the commands I want executed then dynamically investigate the results. I explicitly type &lt;code&gt;execfile&lt;/code&gt; onto the command line so that it will be executed in the interpretor and all the variables will be in the main namespace. Then I can segment parts of the script to put into other scripts which I can import.&lt;/p&gt;
&lt;p&gt;A few different methods have been discussed on other blogs. The ones I found lead me on the right track but required a few modifications. The method below was what finally worked for me. I’ve included it in my PYTHONSTARTUP file with a conditional checking &lt;code&gt;sys.version[0] == &amp;quot;3&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="sourceCode python"&gt;&lt;code class="sourceCode python"&gt;&lt;span class="kw"&gt;def&lt;/span&gt; &lt;span class="dt"&gt;execfile&lt;/span&gt;(filepath,  &lt;span class="dt"&gt;globals&lt;/span&gt;=&lt;span class="ot"&gt;None&lt;/span&gt;, &lt;span class="dt"&gt;locals&lt;/span&gt;=&lt;span class="ot"&gt;None&lt;/span&gt;):
    &lt;span class="ch"&gt;import&lt;/span&gt; sys
    &lt;span class="kw"&gt;if&lt;/span&gt; &lt;span class="dt"&gt;globals&lt;/span&gt; is &lt;span class="ot"&gt;None&lt;/span&gt;:
        &lt;span class="dt"&gt;globals&lt;/span&gt; = sys._getframe(&lt;span class="dv"&gt;1&lt;/span&gt;).f_globals
    &lt;span class="kw"&gt;if&lt;/span&gt; &lt;span class="dt"&gt;locals&lt;/span&gt; is &lt;span class="ot"&gt;None&lt;/span&gt;:
        &lt;span class="dt"&gt;locals&lt;/span&gt; = sys._getframe(&lt;span class="dv"&gt;1&lt;/span&gt;).f_locals
    &lt;span class="kw"&gt;with&lt;/span&gt; &lt;span class="dt"&gt;open&lt;/span&gt;(filepath, &lt;span class="st"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;) &lt;span class="ch"&gt;as&lt;/span&gt; f:
        &lt;span class="kw"&gt;try&lt;/span&gt;:
            code = &lt;span class="dt"&gt;compile&lt;/span&gt;(f.read()+&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;,os.path.abspath(filepath),&lt;span class="st"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;)
            &lt;span class="dt"&gt;exec&lt;/span&gt;(code,&lt;span class="dt"&gt;globals&lt;/span&gt;,&lt;span class="dt"&gt;locals&lt;/span&gt;)
        &lt;span class="kw"&gt;except&lt;/span&gt; &lt;span class="ot"&gt;KeyboardInterrupt&lt;/span&gt;:
            &lt;span class="kw"&gt;return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this helps!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Gregersen</dc:creator><pubDate>Fri, 10 Oct 2014 19:05:59 -0600</pubDate><guid>tag:astrodsg.github.io,2014-10-10:blog/programming/2014/10/execfile-lives.html</guid><category>python</category><category>python3</category><category>programming</category><category>workflow</category></item><item><title>Python 3 All the Things!</title><link>https://astrodsg.github.io/blog/programming/2014/10/python-3-all-the-things.html</link><description>&lt;p&gt;&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
&lt;h1 id="python-3-a-language-for-the-future"&gt;&lt;strong&gt;Python 3 : A Language for the Future&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Yesterday gave a talk at &lt;a href="http://www.slcpy.com"&gt;SLCPython Meetup&lt;/a&gt; Group about Python3. When I agreed to give this talk I had already read through many of the pages of changes (e.g. &lt;a href="https://docs.python.org/3.0/whatsnew/3.0.html"&gt;What’s new in Python 3&lt;/a&gt;) and felt like I had a pretty good understanding of the changes. The thing I didn’t realize was how much I would be learning about unicode.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/astrodsg/Python2to3"&gt;Click here for Resources from my talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1 id="why-unicode-is-a-step-forward"&gt;&lt;strong&gt;Why Unicode is a Step Forward&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Python 2 had several implicit uses of &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; encoding/decoding. ASCII was the first, widely accepted system for encoding human language (i.e. English) to computer bytes. This process is necessary because humans don’t express themselves well in bytes and computers don’t do well with language.&lt;/p&gt;
&lt;p&gt;Many human languages exist. Each has its own ways to express ideas. As computers have evolved and become used all around the globe the need for computers to encode/decode more than just English is paramount. The development of the &lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; system characters is a major step to solving this problem. The next step is for developers to implement Unicode as a foundation for computer systems. This step will make computers more accessible to people of all backgrounds and cultures.&lt;/p&gt;
&lt;p&gt;&lt;img alt="It's a Unicode Party (Sorry this is mostly white folk, but it's fun gif)" src="https://astrodsg.github.io/static/img/blog/its_a_party.gif" style="width: 50%; display: inline-block;"/&gt; &lt;img alt="Unicode Hello World" src="https://astrodsg.github.io/static/img/blog/hello_world_all.png" style="width: 50%; display: inline-block; float:right;"/&gt;&lt;/p&gt;
&lt;h1 id="python-adoption-of-unicode"&gt;&lt;strong&gt;Python Adoption of Unicode&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Unicode handling is the primary reason for the break in backwards compatibility. In the words of core developer &lt;a href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html"&gt;Nick Coghlan&lt;/a&gt; “Fixing [Unicode handling bugs] within the constraints of the Python 2 text model is considered too hard to be worth the effort.”&lt;/p&gt;
&lt;p&gt;The new text model in Python 3 treats all text as either byte arrays (machine language) or Unicode (human language(s)) with more explicit encoding/decoding. The diagram which helped me was this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://astrodsg.github.io/static/img/blog/unicode_sandwich.jpg" alt="Unicode Sandwich" style="width:60%;"/&gt;&lt;/p&gt;
&lt;p&gt;On the outside of the sandwich there’s the computer and byte storage, on the inside is the Unicode which humans understand.&lt;/p&gt;
&lt;p&gt;This new text model also allows people to write code using any Unicode character. For example, &lt;a href="https://github.com/renyuanL/pythonTurtleInChinese"&gt;these scripts&lt;/a&gt; published on github use chinese characters (pretty fracking cool).&lt;/p&gt;
&lt;h1 id="fixing-up-loose-ends"&gt;&lt;strong&gt;Fixing Up Loose Ends&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Since the core developers broke backwards compatibility anyway, this has been a great opportunity to fix up many of the inconsistencies and gotcha’s of Python 2. These are the changes most of us will notice. Things like maing &lt;code&gt;print&lt;/code&gt; a function or the deprecation of many functions and class methods (like &lt;code&gt;raw_input&lt;/code&gt; or &lt;code&gt;dict.iterkeys&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I found it useful to look online at several of the “what’s new guides”. I think &lt;a href="http://docs.pythonsprints.com/python3_porting/py-porting.html"&gt;Brian Curtin’s Porting Guide&lt;/a&gt; is a nice and succinct place to start.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Python3 Wants You" src="https://astrodsg.github.io/static/img/blog/Python3_wants_you.png" style="margin-top:80px; margin-bottom: 30px; height: 20%;"/&gt;&lt;/p&gt;
&lt;h1 id="now-is-the-time"&gt;&lt;strong&gt;Now is the Time!&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Python is a powerful language mostly because of it’s libraries build by the community. The fear was that these packages would have trouble converting to Python3 (maybe never do) and that would be the end of Python. However, it seams to me that fear is no longer valid. By several measures, we’re now at 75% support of Python3 by major libraries. One of these measures, is the &lt;a href="http://py3readiness.org/"&gt;Python 3 Readiness&lt;/a&gt; site which looks at the top 360 &lt;code&gt;pip&lt;/code&gt; packages and the adoption of Python3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://py3readiness.org/"&gt; &lt;img alt="Python3 Readiness" src="https://astrodsg.github.io/static/img/blog/Python3_Readiness.png"/&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With almost all major libraries now supporting Python 3, it’s up to the rest of us to adopt this new language. Good luck!&lt;/p&gt;
&lt;h1 id="other-online-materials"&gt;Other Online Materials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.0/whatsnew/3.0.html"&gt;What’s New in Python 3&lt;/a&gt; – for most of the Python 2.7 to Python 3 changes.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/whatsnew/"&gt;What’s New&lt;/a&gt; – for a VERY long list of everything new (though check out the dense but “short” summary)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nedbatchelder.com/text/unipain.html"&gt;Pragmatic Unicode talk/essay&lt;/a&gt; – or “Why Python 3 Exists” - Coghlan&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pythonsprints.com/python3_porting/py-porting.html"&gt;Python 3 Porting Guide&lt;/a&gt; – nice quick reference for things which have changed from 2.x to 3x&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python3porting.com/"&gt;Porting to Python 3: An in-depth guide&lt;/a&gt; – Definitely in depth&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Gregersen</dc:creator><pubDate>Thu, 09 Oct 2014 19:05:59 -0600</pubDate><guid>tag:astrodsg.github.io,2014-10-09:blog/programming/2014/10/python-3-all-the-things.html</guid><category>python</category><category>python3</category><category>programming</category><category>2to3</category></item></channel></rss>